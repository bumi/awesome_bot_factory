#!/usr/bin/env ruby

require "rubygems"
require "thor"
require 'active_support/inflector'

class AwsomeBotFactoryRunner < Thor
  include Thor::Actions
  source_root File.expand_path("../lib/templates", File.dirname(__FILE__))
  
  desc "deploy", "deploys the application to heroku"
  def deploy(name=nil)
    @skill_app_name = name || "abf-#{Dir.getwd.split("/").last}"
    if !bot_directory?
      say "no bot found. please make sure to run this command in your application directory", :red
      return
    end
    
    run "bundle install", :capture => true
    
    git_dirty = !(run("git status", :capture => true) =~ /nothing to commit/)
    if git_dirty
      run "git add .", :capture => true
      run "git commit -a -m 'deployment'", :capture => true
    end
    
    remotes = run "git remote", :capture => true
    heroku_initialized = remotes =~ /heroku/
    if !heroku_initialized
      say "creating a new heroku application", :green
      run "heroku apps:create #{skill_app_name} --stack cedar"
    end
    run "git push heroku master"
  end
  
  desc "create name", "Creates a new application skeleton for a new awesome bot factory skill"
  def create(name)
    directory = bot_directory? ? "." : name.underscore
    say "Welcome to the AWESOME BOT FACTORY!", :green
    say "setting up your laboratory for #{name}", :green
    @skill_class_name = name.underscore.camelize
    @skill_file_name = name.underscore
    template('skill.rb.erb', "#{directory}/#{skill_file_name}.rb")
    if bot_directory?
      insert_into_file("#{directory}/config.ru", "\nrequire File.join(File.dirname(__FILE__), '#{skill_file_name}.rb')", :after => "Bundler.require")
      append_file("#{directory}/config.ru", %Q{
map '/#{skill_file_name}' do
  run #{skill_class_name}
end
        });
      inside(directory) do
        run "git commit -a -m 'hello #{name}'"
      end
    else
      template('config.ru.erb', "#{directory}/config.ru")
      template('Procfile.erb', "#{directory}/Procfile")
      template('Gemfile.erb', "#{directory}/Gemfile")
      template('readme.md.erb', "#{directory}/README.md")
      template('skill_spec.rb.erb', "#{directory}/spec/#{skill_file_name}_spec.rb")
      template('spec_helper.rb.erb', "#{directory}/spec/spec_helper.rb")
      inside(directory) do
        run 'bundle install', :capture => true
        run 'git init'
        run 'git add .'
        run "git commit -a -m 'hello #{name}'"
      end  
    end
    say "#{skill_author}, #{name} was created, happy hacking!", :green
  end
  
  desc "request", "send a test payload to your local application and see what it returns"
  def request(name, matches="")
    require "net/http"
    require "awesome_bot_factory"
    require "json"
    
    attributes = JSON.parse(matches) rescue {"match" => matches.split(",")}
    name = name.underscore
    
    url = URI.parse("http://localhost:9292/#{name}")
    request = Net::HTTP::Post.new(url.path)
    request.body = AwesomeBotFactory::ExamplePayload.new(attributes).as_json
    response = Net::HTTP.new(url.host, url.port).start {|http| http.request(request) }
    
    say response.body
  end
  
  private 
  
  def skill_file_name
    @skill_file_name
  end
  
  def skill_class_name
    @skill_class_name
  end
  
  def skill_author
    @skill_author ||= ENV["USER"]
  end
  
  def skill_app_name
    (@skill_app_name || @skill_file_name).to_s.gsub("_","-").downcase
  end
  
  def bot_directory?
    !Dir["*.rb"].find{|f| File.read(f) =~ /AwesomeBotFactory::Skill/ }.nil?
  end
end

AwsomeBotFactoryRunner.start